/* line 1, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  margin: 0;
  padding: 0; }

/* line 9, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

/* line 12, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
body {
  line-height: 1; }

/* line 15, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
ol, ul {
  list-style: none; }

/* line 18, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
blockquote, q {
  quotes: none; }

/* line 21, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
blockquote:before, blockquote:after, q:before, q:after {
  content: none; }

/* line 24, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/_cssreset.scss */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
@font-face {
  font-family: 'Aleo';
  src: url("../fonts/Aleo/Aleo-Regular.eot?#") format("eot"), url("../fonts/Aleo/Aleo-Regular.woff") format("woff"), url("../fonts/Aleo/Aleo-Regular.ttf") format("truetype"); }

@font-face {
  font-family: 'Aleo';
  font-weight: bold;
  src: url("../fonts/Aleo/Aleo-Bold.eot?#") format("eot"), url("../fonts/Aleo/Aleo-Bold.woff") format("woff"), url("../fonts/Aleo/Aleo-Bold.ttf") format("truetype"); }

@font-face {
  font-family: 'Avenir';
  src: url("../fonts/Avenir/Avenir-Regular.eot?#") format("eot"), url("../fonts/Avenir/Avenir-Regular.woff") format("woff"), url("../fonts/Avenir/Avenir-Regular.ttf") format("truetype"); }

@font-face {
  font-family: 'Avenir';
  font-weight: bold;
  src: url("../fonts/Avenir/Avenir-Bold.eot?#") format("eot"), url("../fonts/Avenir/Avenir-Bold.woff") format("woff"), url("../fonts/Avenir/Avenir-Bold.ttf") format("truetype"); }

/* line 29, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/atoms/_typography.scss */
nav a {
  color: #FFF;
  text-decoration: none;
  text-align: center;
  line-height: 1.25; }
  /* line 35, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/atoms/_typography.scss */
  nav a h2 {
    font-size: 1.5em;
    font-family: "Avenir", "Helvetica Neue", Helvetica, Arial, Sans-Serif;
    text-transform: uppercase;
    letter-spacing: .1em; }
  /* line 42, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/atoms/_typography.scss */
  nav a h4 {
    font-family: "Avenir", "Helvetica Neue", Helvetica, Arial, Sans-Serif;
    color: #FFF; }

/* line 1, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/atoms/_images.scss */
.header-logo {
  height: 4em;
  margin: 1em;
  line-height: 1;
  margin-left: auto;
  margin-right: auto;
  display: block; }

/* line 1, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/molecules/_listItems-navigation.scss */
nav li {
  padding: 1em;
  padding-left: 0;
  padding-right: 0; }
  /* line 6, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/molecules/_listItems-navigation.scss */
  nav li:nth-of-type(1) {
    background-color: #FF3F46; }
  /* line 9, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/molecules/_listItems-navigation.scss */
  nav li:nth-of-type(2) {
    background-color: #FF7040; }
  /* line 12, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/molecules/_listItems-navigation.scss */
  nav li:nth-of-type(3) {
    background-color: #FFAF40; }
  /* line 15, C:/Users/Alex/Documents/GitHub/bitcamp-branding/scss/molecules/_listItems-navigation.scss */
  nav li:nth-of-type(4) {
    background-color: #7F6C5F; }

/*# sourceMappingURL=index.css.map */